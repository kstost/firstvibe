{
  "timestamp": "2025-08-25T05:03:27.856Z",
  "project": {
    "description": "# 기술 요구사항 문서 (TRD) - 3D 비행 시뮬레이션 게임\n\n## 1. 프로젝트 개요\n\n본 문서는 **3D 비행 시뮬레이션 게임**의 개발을 위한 기술적 요구사항을 정의합니다. AI 코딩 에이전트는 이 문서를 기반으로 게임의 핵심 기능을 구현하고, 안정적인 실행 환경을 구축합니다.\n\n## 2. 기술 스택\n\n*   **게임 엔진**: Unity\n    *   **버전**: 최신 LTS (Long Term Support) 버전\n    *   **이유**: 크로스 플랫폼 개발 지원, 풍부한 에셋 스토어, 커뮤니티 지원, 3D 그래픽 및 물리 엔진의 강점\n*   **프로그래밍 언어**: C#\n*   **버전 관리**: Git\n*   **협업 플랫폼**: GitHub\n\n## 3. 프로젝트 폴더 구조 (Unity 프로젝트 기준)\n\n```\nAssets/\n├── Animations/\n├── Audio/\n│   ├── Music/\n│   └── SFX/\n├── Fonts/\n├── Materials/\n├── Models/\n├── Prefabs/\n├── Scenes/\n│   ├── MainMenu.unity\n│   ├── Gameplay.unity\n│   └── Tutorial.unity\n├── Scripts/\n│   ├── Aircraft/          # 비행기 관련 스크립트 (조작, 물리, 상태 등)\n│   ├── Camera/            # 카메라 제어 스크립트\n│   ├── GameMode/          # 게임 모드 (튜토리얼, 미션, 자유 비행) 관련 스크립트\n│   ├── UI/                # UI 관련 스크립트 (메뉴, HUD, 결과 화면 등)\n│   ├── Environment/       # 환경 관련 스크립트 (날씨, 시간 등)\n│   ├── Manager/           # 게임 매니저, 씬 로더 등\n│   ├── Utilities/         # 공통 유틸리티 스크립트\n│   └── Core/              # 게임의 핵심 로직, 싱글톤 등\n├── Shaders/\n├── Sprites/\n└── Textures/\n```\n\n## 4. 기능별 기술 요구사항\n\n### 4.1. 비행 제어 (FR-001, FR-002)\n\n*   **요구사항 ID**: TC-FlightControl-001\n    *   **설명**: 사용자의 터치 입력 또는 가상 조이스틱 입력을 받아 비행기의 이동 (전후좌우, 상하 고도)을 처리합니다.\n    *   **기술**: Unity Input System (New Input System 권장)\n    *   **구현**:\n        *   `PlayerInput` 컴포넌트를 사용하여 입력 액션 매핑 설정.\n        *   비행기 `Rigidbody` 컴포넌트의 `AddForce` 또는 `velocity`를 사용하여 이동 구현.\n        *   가상 조이스틱 UI 요소와의 연동.\n    *   **검증**:\n        *   모바일 기기에서 터치 입력 시 비행기가 즉각적으로 반응하는가?\n        *   가상 조이스틱을 움직이는 방향과 속도에 따라 비행기가 올바르게 제어되는가?\n        *   상하 고도 조절이 부드럽게 이루어지는가?\n*   **요구사항 ID**: TC-FlightControl-002\n    *   **설명**: 사용자의 입력에 따라 비행기의 가속 및 감속을 구현합니다.\n    *   **기술**: `Rigidbody.AddForce` (Acceleration/Deceleration), `Time.deltaTime`\n    *   **구현**:\n        *   가속/감속 입력에 따라 비행기의 최대 속도 또는 현재 속도 변화를 구현.\n        *   부드러운 속도 변화를 위해 Lerp 또는 SmoothDamp 사용 고려.\n    *   **검증**:\n        *   가속 입력 시 비행기 속도가 점진적으로 증가하는가?\n        *   감속 입력 시 비행기 속도가 점진적으로 감소하는가?\n\n### 4.2. 게임 모드\n\n#### 4.2.1. 튜토리얼 모드 (FR-003)\n\n*   **요구사항 ID**: TC-Tutorial-001\n    *   **설명**: 비행기 조작의 기본 (이동, 가속/감속)을 안내하는 단계별 튜토리얼 시퀀스를 구현합니다.\n    *   **기술**: Unity UI (Text, Button, Image), Coroutines, Event Systems\n    *   **구현**:\n        *   각 단계별로 텍스트 설명 및 시각적 가이드 (화살표, 강조 표시 등) 제공.\n        *   사용자의 조작 입력을 감지하여 다음 단계로 진행.\n        *   필요 시, 특정 조작을 강제하는 일시적인 제어권 획득/반환 메커니즘 구현.\n    *   **검증**:\n        *   각 튜토리얼 단계의 지침이 명확하게 표시되는가?\n        *   사용자가 지침에 따라 올바르게 조작했을 때 다음 단계로 진행되는가?\n        *   모든 기본 조작법이 튜토리얼을 통해 학습 가능한가?\n\n#### 4.2.2. 미션 모드 (FR-004)\n\n*   **요구사항 ID**: TC-Mission-001\n    *   **설명**: 다양한 종류의 미션 (경유지 통과, 제한 시간 내 착륙, 장애물 회피 등)을 구현하고, 각 미션의 목표 달성 여부를 판별합니다.\n    *   **기술**: Trigger Colliders, Scriptable Objects (미션 데이터 관리), State Machine (미션 상태 관리)\n    *   **구현**:\n        *   미션별 목표를 나타내는 Trigger Collider 생성 및 관리.\n        *   Scriptable Object를 사용하여 미션 이름, 설명, 목표 유형, 완료 조건, 보상 등 정의.\n        *   미션 관리자 스크립트를 통해 현재 활성화된 미션 추적 및 완료 조건 확인.\n    *   **검증**:\n        *   각 미션의 목표 지점이나 영역에 진입/이탈 시 올바르게 감지되는가?\n        *   제한 시간, 점수 등 미션 완료 조건이 정확하게 측정되는가?\n        *   미션 성공/실패 시 적절한 피드백 (UI, 사운드)이 제공되는가?\n\n#### 4.2.3. 자유 비행 모드 (FR-005)\n\n*   **요구사항 ID**: TC-FreeFlight-001\n    *   **설명**: 사용자가 제약 없이 3D 환경을 자유롭게 탐색할 수 있는 모드를 구현합니다.\n    *   **기술**: Unity Scene Management, 기본 비행 제어 로직\n    *   **구현**:\n        *   미션 목표나 제한 시간 없이 비행 제어만 활성화된 상태로 게임 플레이.\n        *   탐색 가능한 넓은 3D 환경 씬 구성.\n    *   **검증**:\n        *   사용자가 게임의 모든 영역을 자유롭게 이동할 수 있는가?\n        *   특정 제한 없이 비행 조작이 가능한가?\n\n### 4.3. 비행기 (FR-006, FR-007)\n\n*   **요구사항 ID**: TC-Aircraft-001\n    *   **설명**: 여러 종류의 비행기 모델을 임포트하고, 각 비행기에 고유한 외형 및 비행 특성 (속도, 기동성, 무게 등)을 부여합니다.\n    *   **기술**: Unity 3D Models, Materials, `Rigidbody` (Mass, Drag), Custom Scripts (Aircraft Properties)\n    *   **구현**:\n        *   각 비행기 타입별 Prefab 생성.\n        *   Scriptable Object 또는 Class를 사용하여 비행기 속성 (최대 속도, 가속력, 선회 반경 등) 정의.\n        *   `Rigidbody` 컴포넌트의 질량(Mass), 드래그(Drag) 값 조정.\n        *   비행기 종류에 따라 다른 스크립트 컴포넌트나 파라미터를 적용.\n    *   **검증**:\n        *   각 비행기가 고유한 3D 모델과 재질을 가지고 있는가?\n        *   다른 비행기들을 조종했을 때 확연히 다른 비행 특성을 보이는가? (예: 더 빠르거나, 더 느리거나, 더 잘 선회하는 등)\n*   **요구사항 ID**: TC-Aircraft-002\n    *   **설명**: 게임 내 재화를 사용하여 새로운 비행기를 구매하거나 잠금 해제하는 시스템을 구현합니다.\n    *   **기술**: PlayerPrefs 또는 Serialization (간단한 저장), Game Data Management Script\n    *   **구현**:\n        *   보유한 재화 및 잠금 해제된 비행기 목록을 저장하고 불러오는 기능 구현.\n        *   상점 UI에서 비행기 구매/잠금 해제 로직 처리.\n        *   구매/잠금 해제 성공 시 관련 데이터 업데이트.\n    *   **검증**:\n        *   게임 플레이를 통해 재화를 획득할 수 있는가?\n        *   재화를 사용하여 비행기를 구매하거나 잠금 해제할 수 있는가?\n        *   게임 재시작 시 구매/잠금 해제 상태가 유지되는가?\n\n### 4.4. 3D 환경 (FR-008, FR-009)\n\n*   **요구사항 ID**: TC-Environment-001\n    *   **설명**: 하늘, 구름, 지형 (산, 바다, 도시 등)을 포함하는 몰입감 있는 3D 환경을 구현합니다.\n    *   **기술**: Unity Terrain, Skybox, 3D Models, Particle Systems (구름, 연기 등), Post-processing Stack (색감, 분위기)\n    *   **구현**:\n        *   Unity Terrain 시스템을 사용하여 지형 생성 및 커스터마이징.\n        *   다양한 Skybox 프리셋을 활용하여 하늘 표현.\n        *   장면 구성에 필요한 3D 모델 에셋 (건물, 나무, 산 등) 배치.\n        *   Post-processing Stack을 적용하여 시각적 품질 향상.\n    *   **검증**:\n        *   3D 환경이 시각적으로 매력적이고 디테일한가?\n        *   다양한 지형 요소들이 자연스럽게 배치되어 있는가?\n*   **요구사항 ID**: TC-Environment-002\n    *   **설명**: (선택 사항) 날씨 (맑음, 흐림, 비) 또는 시간대 (낮, 밤) 변화 효과를 구현합니다.\n    *   **기술**: Unity Lighting (Directional Light), Particle Systems (비, 눈), Skybox Material 변경, Post-processing Stack Parameter 조정\n    *   **구현**:\n        *   시간대 변화: Directional Light의 회전 각도 및 색상 변경, Skybox Material 변경.\n        *   날씨 변화: Particle System을 사용하여 비, 눈 효과 추가, 구름 밀도 조절, 조명 및 Post-processing 효과 조정.\n    *   **검증**:\n        *   날씨 또는 시간대 변화 시 시각적 효과가 자연스러운가?\n        *   (선택 사항) 환경 변화가 게임 플레이에 미치는 영향 (시야 등)이 적절한가?\n\n## 5. 비기능적 요구사항 구현 관련 기술\n\n### 5.1. 성능 (NFR-001, NFR-002)\n\n*   **요구사항 ID**: TC-Performance-001\n    *   **설명**: 게임 내 목표 프레임 속도(30 FPS 이상)를 유지하도록 최적화합니다.\n    *   **기술**: Unity Profiler, Draw Call Batching, Occlusion Culling, LOD (Level of Detail), Asset Optimization (Texture Compression, Model Polycount)\n    *   **구현**:\n        *   Profiler를 사용하여 성능 병목 현상 식별 및 개선.\n        *   Static Batching, GPU Instancing, Occlusion Culling 적용.\n        *   LOD Group 컴포넌트를 사용하여 원거리 모델의 폴리곤 수 줄이기.\n        *   텍스처 압축 설정 및 모델 최적화.\n    *   **검증**:\n        *   개발 빌드 또는 테스트 기기에서 Profiler를 통해 평균 FPS 측정 시 30 FPS 이상 유지되는가?\n        *   화면 복잡도가 높은 상황에서도 프레임 드롭이 심하지 않은가?\n*   **요구사항 ID**: TC-Performance-002\n    *   **설명**: 게임 시작 시 로딩 시간을 5초 이내로 단축합니다.\n    *   **기술**: Unity Asset Bundles, Addressables, Scene Management 최적화, 비동기 로딩\n    *   **구현**:\n        *   필요한 에셋을 Asset Bundle 또는 Addressables를 통해 관리하고, 필요한 시점에 로드.\n        *   메인 씬 로딩 시 최소한의 필수 에셋만 포함.\n        *   게임 시작 시 비동기적으로 추가 에셋 로딩.\n    *   **검증**:\n        *   게임 실행 버튼을 누른 후 게임 플레이가 가능한 상태까지의 시간이 5초 이내인가?\n\n### 5.2. 사용성 (NFR-003, NFR-004)\n\n*   **요구사항 ID**: TC-Usability-001\n    *   **설명**: 게임 UI는 직관적이고 일관성 있게 디자인되어야 합니다.\n    *   **기술**: Unity UI System, Design Principles (Consistency, Clarity, Feedback)\n    *   **구현**:\n        *   주요 기능에 대한 명확한 레이블 및 아이콘 사용.\n        *   일관된 디자인 테마 및 레이아웃 유지.\n        *   사용자 입력에 대한 시각적 피드백 제공.\n    *   **검증**:\n        *   사용자는 메뉴 간 이동 및 기능 선택에 어려움을 느끼지 않는가?\n        *   UI 요소들이 명확하고 이해하기 쉬운가?\n*   **요구사항 ID**: TC-Usability-002\n    *   **설명**: 게임 조작은 간결하고 즉각적인 반응성을 가져야 합니다.\n    *   **기술**: Input System, Physics Engine Tuning, Event Handling\n    *   **구현**:\n        *   입력 처리 로직에서 불필요한 지연 제거.\n        *   물리 연산의 현실성과 조작 반응성 사이의 균형 조정.\n    *   **검증**:\n        *   조작 입력 후 비행기의 반응이 즉각적으로 나타나는가?\n        *   조작감이 부드럽고 반응성이 좋은가?\n\n### 5.3. 호환성 (NFR-005)\n\n*   **요구사항 ID**: TC-Compatibility-001\n    *   **설명**: iOS 및 Android의 주요 버전 (최신 2개 버전)을 지원합니다.\n    *   **기술**: Unity Build Settings (Platform Specific Settings), Target SDK Version\n    *   **구현**:\n        *   Unity Build Settings에서 각 플랫폼별 타겟 SDK 버전 설정.\n        *   지원 대상 OS 버전에서 테스트 및 호환성 확인.\n    *   **검증**:\n        *   지원 OS 버전의 테스트 기기에서 게임이 정상적으로 설치 및 실행되는가?\n        *   주요 기능들이 각 OS 환경에서 문제없이 작동하는가?\n\n### 5.4. 보안 (NFR-006)\n\n*   **요구사항 ID**: TC-Security-001\n    *   **설명**: 사용자 데이터 (게임 진행 상황, 설정 등)를 안전하게 저장합니다.\n    *   **기술**: `PlayerPrefs` (간단한 데이터), Serialization (JSON, Binary) + Encryption (선택 사항), Cloud Save (Firebase, Supabase - 추후 확장 고려)\n    *   **구현**:\n        *   `PlayerPrefs`를 사용하여 간단한 데이터 (볼륨 설정, 마지막 플레이 미션 등) 저장.\n        *   게임 진행 상황 등 중요한 데이터는 직렬화하여 파일로 저장하고, 필요 시 암호화 적용 고려.\n        *   **주의**: Firebase/Supabase 연동은 백엔드 개발 단계에서 이루어져야 합니다. 본 TRD에서는 클라이언트 측 저장에 집중합니다.\n    *   **검증**:\n        *   게임 재시작 시 저장된 데이터가 올바르게 로드되는가?\n        *   데이터 파일이 변조되었을 경우 (선택적) 게임이 비정상적으로 작동하지 않는가?\n\n## 6. 시스템 아키텍처 (개략적)\n\n```mermaid\ngraph TD\n    A[사용자 입력] --> B(Input System);\n    B --> C{Aircraft Controller};\n    C --> D[Rigidbody Physics];\n    C --> E[Game State Manager];\n    E --> F[UI Manager];\n    F --> G[HUD Display];\n    E --> H[Mission Manager];\n    H --> I{Mission Objectives};\n    E --> J[Aircraft Manager];\n    J --> K[Aircraft Selection/Shop];\n    L[3D Environment Assets] --> M[Scene Manager];\n    M --> C;\n    M --> J;\n    N[Audio Manager] --> O[SFX & Music];\n\n    subgraph Client (Unity)\n        B; C; D; E; F; G; H; I; J; K; M; N; O;\n    end\n```\n\n*   **Input System**: 사용자 입력을 처리하고 관련 시스템에 전달합니다.\n*   **Aircraft Controller**: 입력에 따라 비행기의 물리적 움직임을 제어합니다.\n*   **Rigidbody Physics**: Unity의 물리 엔진을 사용하여 비행기의 실제 움직임을 시뮬레이션합니다.\n*   **Game State Manager**: 게임의 전반적인 상태 (메뉴, 플레이 중, 일시정지, 게임 오버 등)를 관리합니다.\n*   **UI Manager**: 모든 UI 요소의 생성, 업데이트, 소멸을 관리합니다.\n*   **HUD Display**: 게임 플레이 중 필요한 정보 (속도, 고도, 미션 목표 등)를 화면에 표시합니다.\n*   **Mission Manager**: 현재 진행 중인 미션의 상태를 관리하고 완료 조건을 체크합니다.\n*   **Aircraft Manager**: 현재 선택된 비행기 정보, 보유 비행기 목록 등을 관리합니다.\n*   **Aircraft Selection/Shop**: 사용자가 비행기를 선택하거나 구매할 수 있는 인터페이스를 제공합니다.\n*   **Scene Manager**: 게임 씬 로딩 및 관리를 담당합니다.\n*   **Audio Manager**: 배경음악 및 효과음 재생을 관리합니다.\n\n## 7. API 및 라이브러리\n\n*   **Unity API**: 게임 엔진의 모든 기능 (렌더링, 물리, UI, 입력, 오디오, 씬 관리 등) 사용.\n*   **C# Standard Library**: 프로그래밍 로직 구현에 사용.\n*   **(추후 확장)** Firebase SDK / Supabase SDK: 클라우드 저장, 사용자 인증, 리더보드 등 필요 시 연동.\n\n## 8. 향후 확장 고려사항\n\n*   **네트워크 기능**: 멀티플레이어 모드 구현 시 Photon Unity Networking (PUN) 또는 Mirror와 같은 솔루션 고려.\n*   **클라우드 저장**: Firebase Firestore 또는 Supabase Realtime Database를 활용한 게임 진행 상황 동기화.\n*   **인앱 결제**: Unity IAP (In-App Purchasing)를 활용한 유료 아이템 판매 기능 구현.\n*   **애널리틱스**: Google Analytics for Firebase 등 게임 내 사용자 행동 분석 도구 연동."
  },
  "qa_history": [
    {
      "question_number": 1,
      "question": "어떤 유형의 시뮬레이션 게임을 개발하시겠습니까?",
      "choices": [
        "실제 비행기를 조종하는 것과 같은 사실적인 비행 경험",
        "간단한 조작으로 즐길 수 있는 아케이드 스타일의 비행 게임",
        "특정 임무 완수에 초점을 맞춘 미션 기반 비행 게임",
        "독특한 콘셉트나 판타지 요소가 가미된 비행 게임"
      ],
      "answer": "간단한 조작으로 즐길 수 있는 아케이드 스타일의 비행 게임"
    },
    {
      "question_number": 2,
      "question": "주요 타겟 사용자는 누구인가요?",
      "choices": [
        "모든 연령대의 캐주얼 게이머",
        "비행 시뮬레이션 경험이 있는 하드코어 게이머",
        "새로운 조작법을 배우는 데 익숙한 초보자",
        "성능보다는 시각적 경험을 중시하는 사용자",
        "실제 비행 원리에 관심이 많은 사용자"
      ],
      "answer": "비행 시뮬레이션 경험이 있는 하드코어 게이머"
    }
  ]
}